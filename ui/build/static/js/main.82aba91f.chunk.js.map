{"version":3,"sources":["ServersPage.tsx","DataPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isLoader","loader","state","loading","reducer","action","type","online","serversOnline","ServersPage","useState","servers","setServers","useReducer","dispatch","onCheckStatus","a","Axios","get","result","response","data","running","console","error","onStartServer","post","onShutdownServer","onResizeServer","serverCount","parseInt","log","undefined","status","className","style","padding","minHeight","gutter","span","title","value","shape","size","icon","RedoOutlined","onClick","placeholder","onSearch","onChange","event","currentTarget","enterButton","Dragger","Upload","DataPage","multiple","InboxOutlined","Content","Layout","Sider","App","MenuContent","key","setKey","theme","toString","defaultSelectedKeys","mode","Item","PieChartOutlined","DesktopOutlined","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.82aba91f.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react';\nimport { Button, Col, Row, Statistic } from 'antd';\nimport {\n  RedoOutlined,\n} from '@ant-design/icons';\nimport Axios from 'axios';\nimport Search from 'antd/lib/input/Search';\n\ntype Loader = 'start' | 'status' | 'shut down';\n\ninterface State {\n  readonly loading: boolean;\n  readonly online?: boolean;\n  readonly loader?: Loader;\n  readonly serversOnline?: number;\n}\n\ntype Action =\n  | { type: 'loading', loader?: Loader }\n  | { type: 'status', online?: boolean, serversOnline?: number };\n\nfunction isLoader(loader: Loader, state: State): boolean {\n  return state.loading && loader === state.loader;\n}\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'loading':\n      return {\n        ...state,\n        loading: true,\n        loader: action.loader,\n      };\n    case 'status':\n      return {\n        ...state,\n        loading: false,\n        online: action.online,\n        serversOnline: action.serversOnline,\n      };\n  }\n}\n\nexport const ServersPage = () => {\n  const [servers, setServers] = useState<string>('')\n  const [state, dispatch] = useReducer(reducer, {\n    loading: false,\n  });\n\n  const onCheckStatus = async () => {\n    try {\n      dispatch({ type: 'loading', loader: 'status' });\n      const result = await Axios.get('/api/status');\n      const response = result.data;\n      dispatch({\n        type: 'status',\n        online: response.data.running,\n        serversOnline: response.data.servers,\n      });\n    } catch (error) {\n      console.error(error);\n      dispatch({ type: 'status' });\n    }\n  };\n\n  const onStartServer = async () => {\n    try {\n      dispatch({ type: 'loading', loader: 'start' });\n      const result = await Axios.post('/api/start');\n      const response = result.data;\n      dispatch({\n        type: 'status',\n        online: response.data.running,\n        serversOnline: response.data.servers,\n      });\n    } catch (error) {\n      console.error('error');\n      dispatch({ type: 'status' });\n    }\n  };\n\n  const onShutdownServer = async () => {\n    try {\n      dispatch({ type: 'loading', loader: 'shut down' });\n      await Axios.post('/api/shutdown');\n      dispatch({\n        type: 'status',\n        online: false,\n        serversOnline: 0,\n      });\n    } catch (error) {\n      console.error('error');\n      dispatch({ type: 'status' });\n    }\n  };\n\n  const onResizeServer = async () => {\n    const serverCount = parseInt(servers);\n\n    try {\n      dispatch({ type: 'loading' });\n      const result = await Axios.post('/api/resize', serverCount);\n      console.log('result', result);\n      dispatch({\n        type: 'status',\n        online: true,\n        serversOnline: result.data.data.servers,\n      });\n    } catch (error) {\n      console.error('error');\n      dispatch({ type: 'status' });\n    }\n  };\n\n  const serversOnline = state.serversOnline !== undefined ? state.serversOnline : '?';\n\n  const status = state.online === undefined ? '?' : (state.online ? 'Online' : 'Offline');\n\n  return (\n    <>\n      <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n        <Row gutter={16}>\n          <Col span={12}>\n            <Statistic title=\"Status\" value={status} />\n          </Col>\n          <Col span={12}>\n            <Statistic title=\"Servers Running\" value={serversOnline} />\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              loading={isLoader('status', state)}\n              icon={<RedoOutlined />}\n              onClick={onCheckStatus}\n            />\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col span={5}>\n            <Button\n              type=\"primary\"\n              loading={isLoader('start', state)}\n              onClick={onStartServer}\n            >\n              {isLoader('start', state) ? 'Starting server...' : 'Start server'}\n            </Button>\n          </Col>\n          <Col span={6}>\n            <Search\n              placeholder=\"Servers to add\"\n              onSearch={onResizeServer}\n              onChange={event => setServers(event.currentTarget.value)}\n              enterButton=\"Resize\"\n              value={servers}\n            />\n          </Col>\n          <Col span={5}>\n            <Button\n              type=\"primary\"\n              loading={isLoader('shut down', state)}\n              onClick={onShutdownServer}\n            >\n              {isLoader('shut down', state) ? 'Shutting down server...' : 'Shutdown server'}\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Upload } from 'antd';\nimport {\n  InboxOutlined,\n} from '@ant-design/icons';\n\nconst { Dragger } = Upload;\n\nexport const DataPage = () => {\n  return (\n    <>\n      <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n        <Dragger multiple action=\"/api/inject\">\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">Click or drag files to this area to upload</p>\n          <p className=\"ant-upload-hint\">\n            Support for a single or bulk upload. Supported formats are ...\n          </p>\n        </Dragger>\n      </div>\n    </>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { Layout, Menu } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n} from '@ant-design/icons';\nimport { ServersPage } from './ServersPage';\nimport { DataPage } from './DataPage';\nimport './App.css';\n\nconst { Content, Sider } = Layout;\n\nconst App = () => {\n  const [key, setKey] = useState<string>('servers');\n\n  let MenuContent: FunctionComponent;\n  if (key === 'servers') {\n    MenuContent = ServersPage;\n  } else {\n    MenuContent = DataPage;\n  }\n\n  return (\n    <div className=\"App\">\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider theme=\"light\">\n          <div className=\"logo\" />\n          <Menu onClick={event => setKey(event.key.toString())} defaultSelectedKeys={[key]} mode=\"inline\">\n            <Menu.Item key=\"servers\" icon={<PieChartOutlined />}>\n              Servers\n            </Menu.Item>\n            <Menu.Item key=\"data\" icon={<DesktopOutlined />}>\n              Data\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Content style={{ margin: '0 16px' }}>\n            <MenuContent />\n          </Content>\n        </Layout>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}